# -*- coding: utf-8 -*-
"""dataset_split_and_hugginface_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QxTod1Hd_w-ouL4avv4N1vV_f40iWu2k
"""

import imageio
import os
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
import random
import shutil

from google.colab import drive
drive.mount('/content/drive')

data_directory = "/content/drive/MyDrive/Colab Notebooks/final project stanford car fine tuning/car_data"
train_directory = os.path.join(data_directory, "train")
test_directory = os.path.join(data_directory, "test")
image_size = (128, 128)

def move_train_from_test(train_dir, test_dir, num_per_class=20):
    for class_name in os.listdir(test_dir):
        test_class_folder = os.path.join(test_dir, class_name)
        train_class_folder = os.path.join(train_dir, class_name)

        # Skip anything that isn't a directory
        if not os.path.isdir(test_class_folder):
            continue

        # Ensure the train subfolder exists
        os.makedirs(train_class_folder, exist_ok=True)

        # List all image filenames inside this test subfolder
        all_test_images = [
            fname for fname in os.listdir(test_class_folder)
            if os.path.isfile(os.path.join(test_class_folder, fname))
        ]
        if not all_test_images:
            continue

        # Sample up to num_per_class filenames
        chosen = all_test_images
        if len(all_test_images) > num_per_class:
            chosen = random.sample(all_test_images, num_per_class)

        # Move each chosen test image into the corresponding train folder
        for img_name in chosen:
            src_path = os.path.join(test_class_folder, img_name)
            dst_path = os.path.join(train_class_folder, img_name)

            # If destination exists, generate a new name to avoid overwriting
            if os.path.exists(dst_path):
                name, ext = os.path.splitext(img_name)
                suffix = 1
                while True:
                    new_name = f"{name}_copy{suffix}{ext}"
                    new_dst = os.path.join(train_class_folder, new_name)
                    if not os.path.exists(new_dst):
                        dst_path = new_dst
                        break
                    suffix += 1

            shutil.move(src_path, dst_path)

        print(f"Moved {len(chosen)} images from '{class_name}' in test → train")


move_train_from_test(train_directory, test_directory, num_per_class=20)

def count_images_in_directory(directory):
  """Counts the total number of images in a directory and its subdirectories."""
  image_count = 0
  for root, _, files in os.walk(directory):
    for file in files:
      if file.lower().endswith((".jpg", ".png", ".jpeg")):
        image_count += 1
  return image_count

total_train_images = count_images_in_directory(train_directory)
total_test_images = count_images_in_directory(test_directory)

print(f"Total images in train directory: {total_train_images}")
print(f"Total images in test directory: {total_test_images}")
print(f"Total images in train and test directories: {total_train_images + total_test_images}")

!pip install datasets huggingface_hub

!pip install -U datasets huggingface_hub fsspec

from huggingface_hub import login
login("")

from datasets import load_dataset, DatasetDict

data_root = "/content/drive/MyDrive/Colab Notebooks/final project stanford car fine tuning/car_data"

# load_dataset with 'imagefolder' will automatically infer class labels from sub‑folders
ds = load_dataset(
    "imagefolder",
    data_dir=data_root,
    split={"train": "train", "test": "test"}
)

print(ds)

repo_id = "Harsh9699/Stanford_car_75_25_split"

# this will create a new dataset repo under my account
ds.push_to_hub(repo_id)

!pip install datasets[vision] pillow matplotlib

from datasets import load_dataset
repo_id = "Harsh9699/Stanford_car_75_25_split"
ds = load_dataset(repo_id)

print(ds)  # to show DatasetDict with 'train' and 'test'

from matplotlib import pyplot as plt

def show_samples(split="test", n=6):
    images = ds[split][:n]["image"]
    labels = ds[split][:n]["label"]
    label_feature = ds[split].features["label"]
    names = [label_feature.int2str(l) for l in labels]

    plt.figure(figsize=(12, 4))
    for i, img in enumerate(images):
        ax = plt.subplot(1, n, i + 1)
        ax.imshow(img)
        ax.set_title(names[i], fontsize=8)
        ax.axis('off')
    plt.show()

show_samples("test", n=6)

from matplotlib import pyplot as plt

def show_last_samples(split="test", n=6):
    total = len(ds[split])
    # Get last n items
    slice_start = max(total - n, 0)
    examples = ds[split][slice_start : total]

    images = examples["image"]
    labels = examples["label"]
    label_feature = ds[split].features["label"]
    names = [label_feature.int2str(l) for l in labels]

    plt.figure(figsize=(12, 4))
    for i, img in enumerate(images):
        ax = plt.subplot(1, n, i + 1)
        ax.imshow(img)
        ax.set_title(names[i], fontsize=8)
        ax.axis('off')
    plt.show()


show_last_samples("test", n=6)
